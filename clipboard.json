[
    "python -m http.server 8000",
    "ⓨⓞⓤⓐⓝⓐⓝ✉❶❻❸.ⓒⓞⓜ",
    "✉",
    "✉ⓒⓞⓜ",
    "ⓨⓞⓤⓐⓝⓐⓝ",
    "ⓎⓄⓊⒶⓃⒶⓃ❶❻❸ⓨⓞⓤⓐⓝⓐⓝ𝔂𝓸𝓾𝓪𝓷𝓪𝓷𝓎㊚❛❝＊㊗ø∮✚✖≣◭❖❀❁✿✾✽✶☆✩⍣★☆",
    "# vim: set sw=2 sts=2 et:",
    "<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n            <span class=\"sr-only\"><\/span>\n            <span class=\"icon-bar\"><\/span>\n            <span class=\"icon-bar\"><\/span>\n            <span class=\"icon-bar\"><\/span>\n          <\/button>",
    "<footer>\n          <p>&copy; Company 2015  <img src=\"http:\/\/youanan.qiniudn.com\/youanan.com\/youananemail.png\"  alt=\"联系我\" border=\"0\"><\/p>\n      <\/footer>",
    "\/storage\/emulated\/0\/myfiles\/vimwiki",
    "\/storage\/emulated\/0\/myfiles",
    "在.vimrc中添加以下代码后，重启vim即可实现按TAB产生4个空格：\nset ts=4  (注：ts是tabstop的缩写，设TAB宽4个空格)\nset expandtab\n\n对于已保存的文件，可以使用下面的方法进行空格和TAB的替换：\nTAB替换为空格：\n:set ts=4\n:set expandtab\n:%retab!\n\n空格替换为TAB：\n:set ts=4\n:set noexpandtab\n:%retab!\n\n加!是用于处理非空白字符之后的TAB，即所有的TAB，若不加!，则只处理行首的TAB。",
    "%retab!",
    "set expandtab ",
    ":set shiftwidth=4 ",
    ":set tabstop=4 ",
    "LbJKSt7Hntq7DdZTZ8FtP4FsRNWw8Y0j",
    "pip install --upgrade tinify",
    "https:\/\/github.com\/youanan\/rime",
    "荸荠接龙\n1，金秋大道128号3-201游17162718168  1份",
    "金秋大道128号3-201游17162718168",
    "! [rejected]        master -> master (non-fast-forward)",
    "Updates were rejected because the remote contains work that you do",
    "git config --global core.autocrlf false",
    "warning: CRLF will be replaced by LF in node_modules\/nunjucks\/browser\/nunjucks-slim.js.\nThe file will have its original line endings in your working directory",
    "git@github.com:youanan\/vimwik_files.git",
    "dirname `find ~ -perm +0111 -type l -iname \"hexo\" | grep '\/bin\/hexo'",
    "dirname `which npm`",
    "which npm",
    "which node",
    "No command hexo found,",
    "npm install -g cnpm --registry=https:\/\/registry.npm.taobao.org\n",
    "npm config set registry https:\/\/registry.npm.taobao.org\n",
    "npm config set registry \"https:\/\/registry.npm.taobao.org\"",
    "npm config set registry \"https:\/\/registry.npm.taobao.org",
    "npm install -g hexo-cli\n",
    "git clone https:\/\/github.com\/username\/username.github.io",
    "题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？",
    "engine:                    # 输入引擎设定，即挂接组件的「处方」\n  processors:              # 一、这批组件处理各类按键消息\n    - ascii_composer       # ※ 处理西文模式及中西文切换\n    - recognizer           # ※ 与 matcher 搭配，处理符合特定规则的输入码，如网址、反查等\n    - key_binder           # ※ 在特定条件下将按键绑定到其他按键，如重定义逗号、句号爲候选翻页键\n    - speller              # ※ 拼写处理器，接受字符按键，编辑输入码\n    - punctuator           # ※ 句读处理器，将单个字符按键直接映射爲文字符号\n    - selector             # ※ 选字处理器，处理数字选字键、上、下候选定位、换页键\n    - navigator            # ※ 处理输入栏内的光标移动键\n    - express_editor       # ※ 编辑器，处理空格、回车上屏、回退键等\n  segmentors:              # 二、这批组件识别不同内容类型，将输入码分段\n    - ascii_segmentor      # ※ 标识西文段落\n    - matcher              # ※ 标识符合特定规则的段落，如网址、反查等\n    - abc_segmentor        # ※ 标识常规的文字段落\n    - punct_segmentor      # ※ 标识句读段落\n    - fallback_segmentor   # ※ 标识其他未标识段落\n  translators:             # 三、这批组件翻译特定类型的编码段爲一组候选文字\n    - echo_translator      # ※ 没有其他候选字时，回显输入码\n    - punct_translator     # ※ 转换标点符号\n    - script_translator    # ※ 脚本翻译器，用于拼音等基于音节表的输入方案\n    - reverse_lookup_translator  # ※ 反查翻译器，用另一种编码方案查码\n  filters:                 # 四、这批组件过滤翻译的结果\n    - simplifier           # ※ 繁简转换\n    - uniquifier           # ※ 过滤重複的候选字，有可能来自繁简转换\n注：除示例代码中引用的组件外，尚有\n\n- fluid_editor      # ※ 句式编辑器，用于以空格断词、回车上屏的【注音】、【语句流】等输入方案，替换 express_editor，也可以写作 fluency_editor\n- chord_composer    # ※ 和絃作曲家或曰并击处理器，用于【宫保拼音】等多键并击的输入方案\n- table_translator  # ※ 码表翻译器，用于仓颉、五笔等基于码表的输入方案，替换 script_translator",
    "engine:                    # 輸入引擎設定，即掛接組件的「處方」\n  processors:              # 一、這批組件處理各類按鍵消息\n    - ascii_composer       # ※ 處理西文模式及中西文切換\n    - recognizer           # ※ 與 matcher 搭配，處理符合特定規則的輸入碼，如網址、反查等\n    - key_binder           # ※ 在特定條件下將按鍵綁定到其他按鍵，如重定義逗號、句號爲候選翻頁鍵\n    - speller              # ※ 拼寫處理器，接受字符按鍵，編輯輸入碼\n    - punctuator           # ※ 句讀處理器，將單個字符按鍵直接映射爲文字符號\n    - selector             # ※ 選字處理器，處理數字選字鍵、上、下候選定位、換頁鍵\n    - navigator            # ※ 處理輸入欄內的光標移動鍵\n    - express_editor       # ※ 編輯器，處理空格、回車上屏、回退鍵等\n  segmentors:              # 二、這批組件識別不同內容類型，將輸入碼分段\n    - ascii_segmentor      # ※ 標識西文段落\n    - matcher              # ※ 標識符合特定規則的段落，如網址、反查等\n    - abc_segmentor        # ※ 標識常規的文字段落\n    - punct_segmentor      # ※ 標識句讀段落\n    - fallback_segmentor   # ※ 標識其他未標識段落\n  translators:             # 三、這批組件翻譯特定類型的編碼段爲一組候選文字\n    - echo_translator      # ※ 沒有其他候選字時，回顯輸入碼\n    - punct_translator     # ※ 轉換標點符號\n    - script_translator    # ※ 腳本翻譯器，用於拼音等基於音節表的輸入方案\n    - reverse_lookup_translator  # ※ 反查翻譯器，用另一種編碼方案查碼\n  filters:                 # 四、這批組件過濾翻譯的結果\n    - simplifier           # ※ 繁簡轉換\n    - uniquifier           # ※ 過濾重複的候選字，有可能來自繁簡轉換\n註：除示例代碼中引用的組件外，尚有\n\n- fluid_editor      # ※ 句式編輯器，用於以空格斷詞、回車上屏的【注音】、【語句流】等輸入方案，替換 express_editor，也可以寫作 fluency_editor\n- chord_composer    # ※ 和絃作曲家或曰並擊處理器，用於【宮保拼音】等多鍵並擊的輸入方案\n- table_translator  # ※ 碼表翻譯器，用於倉頡、五筆等基於碼表的輸入方案，替換 script_translator",
    "https:\/\/m.tv.sohu.com\/svs\/sv6071749.shtml?channeled=1211160001&sf_atype=apps&sf_pro=1&resorce_click=1&sf_cv=7.9.1&sf_mtype=6",
    "\/storage\/emulated\/0\/Download\/mht\/RimeWithSchemata · rimehome Wiki.mht\n",
    "![最好用的五笔输入法](https:\/\/github.com\/KyleBing\/rime-wubi86-jidan\/blob\/master\/imgs\/main.gif)",
    "\/storage\/emulated\/0\/DCIM\/ScreenRecorder\/Screenrecorder-2020-03-06-15-25-11-629.mp4\n",
    "clip_board: {label: 剪切板, send: Control+Shift+v}",
    "com.miui.screenrecorder",
    "261203",
    "858722",
    ":let i = 1 :while i < 5 : echo \"count is\" i : let i += 1 :endwhile",
    "Control+a",
    "sudo -H pip install --upgrade youtube-dl",
    ":.,\/^$\/-1!sort",
    "OBJS = \\\nversion.o \\ pch.o \\ getopt.o \\ util.o \\ getopt1.o \\ inp.o \\ patch.o \\ backup.o",
    "https:\/\/m.youtube.com\/watch?v=Ai0ZTH_-JFY",
    ":%s\/\\([^,]*\\), \\(.*\\)\/\\2 \\1\/",
    "cloud.dict.yaml\n",
    "clipboard.json\n",
    "wubi86_jidian_user.dict.yaml\n",
    "phrase.json\n",
    "ความเหงา",
    "‮",
    "chrome:\/\/newtab\/",
    "text: \"{Control+a}{BackSpace}\"}",
    "🇺🇸",
    "🇨🇳",
    "U+1F1E8",
    "key_hint_offset_y",
    "#bac2c6",
    "#606c70",
    "#ebedec",
    "#a2a9af",
    "Copied!",
    "#CCCCCC",
    "#EFEFEF",
    "stdio.h fcntl.h unistd.h stdlib.h",
    "“疫情就像照妖镜。”是的，\n它照出了世道人心，\n照出了是非善恶，\n照出了一个人到底是丑陋还是光明\nmy name is youan.",
    ":set modifiable",
    "im.rotate(45).show()",
    "draw = ImageDraw.Draw(image)",
    "# 输出文字:\nfor t in range(4):\n    draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2())\n# 模糊:\nimage = image.filter(ImageFilter.BLUR)\nimage.save('code.jpg', 'jpeg')",
    ":runtime syntax\/colortest.vim",
    "draw.text((10, 25), \"world\", font=font)",
    "很多网友都说，“疫情就像照妖镜。”是的，它照出了世道人心，照出了是非善恶，照出了一个人到底是丑陋还是光明。\n\n我们敬佩那些有专业精神，兢兢业业地做贡献的人，他们是独行的勇士。\n\n我们称赞那些心有大爱，内心温暖的人，他们是人类风雨同舟的桥梁。\n\n我们看清了那些为了一己私欲，不顾规则的人，他们也为此付出了代价。\n\n抗击疫情到了攻坚期，更需要所有人的同心协力。如张文宏医生所说：“一是耐心，二是信心。”\n\n相信未来，相信阴霾终会散去。",
    ":set listchars=tab:>-,trail:-",
    "Hello there. This is an example. Just some text.",
    "ffmpeg -threads2 -y -r 10 -i \/tmpdir\/image%04d.jpg -i audio.mp3 -absf aac_adtstoasc output.mp4",
    " - {click: Mode_switch, long_click: Candidate_switch, width: 12 ,has_menu: select_third}",
    "Mode_switch: {toggle: ascii_mode, send: Mode_switch, functional: false}",
    "besos",
    "คิดถึง",
    "么么哒",
    "จุ๊บ",
    "font = ImageFont.truetype",
    "font = ImageFont.truetype('simsun.ttc',24) # 创建一个font对象并指定大小\nbase = Image.open('e3.jpg').convert('RGBA') # 打开一个图片，并将其转换为RGBA模式\ntxt = Image.new('RGBA', base.size, (255,255,255,0)) #创建文本image 白底透明\ntext = \"你好！\"\ndraw = ImageDraw.Draw(txt) # 创建一个可绘画得image对象\ndraw.text((20, 20),text, fill=(255,255,255),font=font) \nout = Image.alpha_composite(base, txt)\n\nout.show()",
    "im2 = im.filter(ImageFilter.CONTOUR)",
    "im1 = im.filter(ImageFilter.BLUR)\n\nim2 = im.filter(ImageFilter.MinFilter(3))\nim3 = im.filter(ImageFilter.MinFilter)",
    "ImageFilter.BLUR 模糊滤镜\nImageFilter.CONTOUR 轮廓\nImageFilter.EDGE_ENHANCE 边界加强\nImageFilter.EDGE_ENHANCE_MORE 边界加强(阀值更大)\nImageFilter.EMBOSS 浮雕滤镜\nImageFilter.FIND_EDGES 边界滤镜\nImageFilter.SMOOTH 平滑滤镜\nImageFilter.SMOOTH_MORE 平滑滤镜(阀值更大)\nImageFilter.SHARPEN 锐化滤镜",
    "font = ImageFont.truetype(\"arial.ttf\", 15)",
    "draw.text((10, 10), \"hello\", font=font)",
    "syht-Bold.otf\n",
    "# 240 x 60:\nwidth = 60 * 4\nheight = 60\nimage = Image.new('RGB', (width, height), (255, 255, 255))\n# 创建Font对象:\nfont = ImageFont.truetype('Arial.ttf', 36)\n# 创建Draw对象:\ndraw = ImageDraw.Draw(image)\n# 填充每个像素:\nfor x in range(width):\n    for y in range(height):\n        draw.point((x, y), fill=rndColor())",
    "# 随机颜色2:\ndef rndColor2():\n    return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))\n",
    "# 随机颜色1:\ndef rndColor():\n    return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))",
    "# 随机字母:\ndef rndChar():\n    return chr(random.randint(65, 90))",
    "im2 = im.filter(ImageFilter.BLUR)",
    "ImageFilter",
    "# 缩放到50%:\nim.thumbnail((w\/\/2, h\/\/2))\nprint('Resize image to: %sx%s' % (w\/\/2, h\/\/2))\n# 把缩放后的图像用jpeg格式保存:",
    "im.thumbnail((w\/\/2, h\/\/2))\nprint('Resize image to: %sx%s' % (w\/\/2, h\/\/2))\n# 把缩放后的图像用jpeg格式保存:\nim.save('thumbnail.jpg', 'jpeg')",
    "draw = ImageDraw.Draw(im)\ndraw.line((0, 0) + im.size, fill=128)\ndraw.line((0, im.size[1], im.size[0], 0), fill=128)\ndel draw\n\n# write to stdout\nim.save(sys.stdout, \"PNG\")",
    "with Image.open(\"hopper.ppm\") as im:\n    title = \"hopper\"\n    box = (1*72, 2*72, 7*72, 10*72) # in points\n\n    ps = PSDraw.PSDraw() # default is sys.stdout\n    ps.begin_document(title)\n\n    # draw the image (75 dpi)\n    ps.image(box, im, 75)\n    ps.rectangle(box)\n\n    # draw title\n    ps.setfont(\"HelveticaNarrow-Bold\", 36)\n    ps.text((3*72, 4*72), title)\n\n    ps.end_document()",
    "PSDraw",
    "AttributeError: 'str' object has no attribute 'size'",
    "os.path.join",
    "os.path.split(os.path.realpath(__file__))[0]",
    "import os",
    "Pillow",
    "# 阅读\nbook_x = title_x + 5\nbook_start_y = title_y - 190\nbook_y = 0\nbook_line = 50\nfor num, book in enumerate(books):\n    y = book_start_y - num * book_line\n    book_num = num + 1\n    draw.text((book_x, height - y), u'%s. %s' % (book_num, book), color, font)\n\n作者：it书童\n链接：https:\/\/www.jianshu.com\/p\/2698af6c5892\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。",
    "# 当前时间\ncur_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\ncur_time_x = 590\ncur_time_y = title_y - 25\ncur_time_font = ImageFont.truetype(font_type, 25)\ndraw.text((cur_time_x, height - cur_time_y), u'%s' % cur_time, color, cur_time_font)\n\n作者：it书童\n链接：https:\/\/www.jianshu.com\/p\/2698af6c5892\n來源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。",
    "# 标题\ntitle_x = header_x\ntitle_y = header_y - 80\ndraw.text((title_x, height - title_y), u'%s' % title, color, title_font)\n",
    "# header头\nheader_x = 130\nheader_y = 690\ndraw.text((header_x, height - header_y), u'%s' % header, color, header_font)\n"
]